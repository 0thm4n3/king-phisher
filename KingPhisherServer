#!/usr/bin/python -B
# -*- coding: utf-8 -*-
#
#  KingPhisherServer
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following disclaimer
#    in the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of the  nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import ConfigParser
import logging
import os
import threading

from AdvancedHTTPServer import build_server_from_config, SectionConfigParser

from king_phisher.server import server
from king_phisher.server import database

def main():
	parser = argparse.ArgumentParser(description = 'King Phisher Server', conflict_handler = 'resolve')
	parser.add_argument('-v', '--version', action = 'version', version = parser.prog + ' Version: ' + server.__version__)
	parser.add_argument('--foreground', dest = 'foreground', action = 'store_true', default = False, help = 'run in forground (do not fork)')
	parser.add_argument('-L', '--log', dest = 'loglvl', action = 'store', choices = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], default = 'CRITICAL', help = 'set the logging level')
	parser.add_argument('config_file', action = 'store', type = argparse.FileType('r'), help = 'configuration file to use')
	arguments = parser.parse_args()

	logging.getLogger('').setLevel(logging.DEBUG)
	console_log_handler = logging.StreamHandler()
	console_log_handler.setLevel(getattr(logging, arguments.loglvl))
	console_log_handler.setFormatter(logging.Formatter("%(levelname)-8s %(message)s"))
	logging.getLogger('').addHandler(console_log_handler)
	config_file = arguments.config_file
	del parser

	config = ConfigParser.ConfigParser()
	config.readfp(config_file)
	king_phisher_server = build_server_from_config(config, 'server', ServerClass = server.KingPhisherServer, HandlerClass = server.KingPhisherRequestHandler)
	king_phisher_server.serve_files = True
	king_phisher_server.serve_files_list_directories = False
	king_phisher_server.serve_robots_txt = True
	king_phisher_server.http_server.config = SectionConfigParser('server', config)
	king_phisher_server.http_server.throttle_semaphore = threading.Semaphore(2)
	database_file = config.get('server', 'database')
	if database_file != ':memory:' and not os.path.exists(database_file):
		database.create_database(database_file)
	king_phisher_server.load_database(database_file)
	king_phisher_server.serve_forever(fork = (not arguments.foreground))

if __name__ == '__main__':
	main()
