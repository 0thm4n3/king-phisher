#!/usr/bin/python -B
# -*- coding: utf-8 -*-
#
#  KingPhisherServer
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following disclaimer
#    in the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of the project nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import logging
import os
import pwd
import signal
import sys
import threading

from king_phisher import configuration
from king_phisher import find
from king_phisher import utilities
from king_phisher import version
from king_phisher.server import server

try:
	import msgpack
	has_msgpack = True
except ImportError:
	has_msgpack = False

__requirements__ = [
	'dnspython>=1.10.0',
	'Jinja2>=2.7.1',
	'msgpack-python>=0.4.2',
	'paramiko>=1.10.1',
	'PyYAML>=3.10',
]

def main():
	parser = argparse.ArgumentParser(description='King Phisher Server', conflict_handler='resolve')
	parser.add_argument('-v', '--version', action='version', version=parser.prog + ' Version: ' + version.version)
	parser.add_argument('-L', '--log', dest='loglvl', action='store', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], default='CRITICAL', help='set the logging level')
	parser.add_argument('-f', '--foreground', dest='foreground', action='store_true', default=False, help='run in forground (do not fork)')
	parser.add_argument('config_file', action='store', type=argparse.FileType('r'), help='configuration file to use')
	arguments = parser.parse_args()

	logging.getLogger('').setLevel(logging.DEBUG)
	console_log_handler = logging.StreamHandler()
	console_log_handler.setLevel(getattr(logging, arguments.loglvl))
	console_log_handler.setFormatter(logging.Formatter("%(levelname)-8s %(message)s"))
	logging.getLogger('').addHandler(console_log_handler)
	config_file = arguments.config_file
	del parser
	logger = logging.getLogger('KingPhisher.Server.CLI')

	missing_requirements = utilities.check_requirements(__requirements__)
	if missing_requirements:
		print('[-] the following package requirements are missing or incompatible:')
		for missing_req in missing_requirements:
			print('[-]   - ' + missing_req)
		print('[-] please install the missing requirements with pip')
		return os.EX_SOFTWARE

	if os.getuid():
		print('[-] This must be executed as root')
		print('[-] Configure the setuid_username option in the config file to drop privileges.')
		return os.EX_NOPERM

	if not has_msgpack:
		print('[-] This server requires the Python msgpack module to be installed.')
		print('[-] Please install it from http://msgpack.org/ or your package manager.')
		return os.EX_UNAVAILABLE

	config = configuration.Configuration(config_file.name)
	log_file_path = None
	if config.has_section('logging'):
		log_level = min(getattr(logging, arguments.loglvl), getattr(logging, config.get('logging.level').upper()))
		if config.has_option('logging.file') and config.get('logging.file'):
			log_file_path = config.get('logging.file')
			file_handler = logging.FileHandler(log_file_path)
			file_handler.setFormatter(logging.Formatter("%(asctime)s %(name)-50s %(levelname)-10s %(message)s"))
			logging.getLogger('').addHandler(file_handler)
			file_handler.setLevel(log_level)
		if config.has_option('logging.console') and config.get('logging.console'):
			console_log_handler.setLevel(log_level)

	if (not arguments.foreground) and os.fork():
		return os.EX_OK

	# Configure environment variables
	data_path = os.path.dirname(__file__)
	data_path = os.path.join(data_path, 'data', 'server')
	data_path = os.path.abspath(data_path)
	find.data_path_append(data_path)

	data_path = os.getcwd()
	data_path = os.path.join(data_path, 'data', 'server')
	data_path = os.path.abspath(data_path)
	find.data_path_append(data_path)

	if config.has_option('server.data_path'):
		find.data_path_append(config.get('server.data_path'))

	king_phisher_server = server.build_king_phisher_server(config)

	server_pid = os.getpid()
	logger.info('server running in process: ' + str(server_pid))

	if config.has_option('server.pid_file'):
		pid_file = open(config.get('server.pid_file'), 'w')
		pid_file.write(str(server_pid))
		pid_file.close()
	if config.has_option('server.setuid_username'):
		setuid_username = config.get('server.setuid_username')
		user_info = pwd.getpwnam(setuid_username)
		if log_file_path:
			os.chown(log_file_path, user_info.pw_uid, user_info.pw_gid)
		os.setregid(user_info.pw_gid, user_info.pw_gid)
		os.setreuid(user_info.pw_uid, user_info.pw_uid)
		logger.info("dropped privileges to the {0} account".format(setuid_username))
	database_dir = os.path.dirname(config.get('server.database'))
	if not os.access(database_dir, os.W_OK):
		logger.critical('sqlite3 requires write premissions to the folder containing the database')
		king_phisher_server.shutdown()
		return os.EX_NOPERM
	sighup_handler = lambda: threading.Thread(target=king_phisher_server.shutdown).start()
	signal.signal(signal.SIGHUP, lambda signum, frame: sighup_handler())
	try:
		king_phisher_server.serve_forever(fork=False)
	except KeyboardInterrupt:
		pass
	king_phisher_server.shutdown()
	logging.shutdown()
	return os.EX_OK

if __name__ == '__main__':
	sys.exit(main())
