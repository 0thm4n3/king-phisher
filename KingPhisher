#!/usr/bin/python -B
# -*- coding: utf-8 -*-
#
#  KingPhisher
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following disclaimer
#    in the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of the  nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import logging
import os
import sys

from king_phisher import find
from king_phisher.client import client
from king_phisher.client import gui_utilities

from gi.repository import GObject
from gi.repository import Gtk

def main():
	parser = argparse.ArgumentParser(description = 'King Phisher', conflict_handler = 'resolve')
	parser.add_argument('-c', '--config', dest = 'config_file', action = 'store', required = False, help = 'specify a configuration file to use')
	parser.add_argument('-v', '--version', action = 'version', version = parser.prog + ' Version: ' + client.__version__)
	parser.add_argument('-L', '--log', dest = 'loglvl', action = 'store', choices = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], default = 'CRITICAL', help = 'set the logging level')
	arguments = parser.parse_args()

	logging.getLogger('').setLevel(logging.DEBUG)
	console_log_handler = logging.StreamHandler()
	console_log_handler.setLevel(getattr(logging, arguments.loglvl))
	console_log_handler.setFormatter(logging.Formatter("%(levelname)-8s %(message)s"))
	logging.getLogger('').addHandler(console_log_handler)
	config_file = arguments.config_file
	del arguments, parser
	logger = logging.getLogger('KingPhisher.Client.CLI')

	# Configure environment variables
	find.data_path_append('data/client')
	os.environ['KING_PHISHER_GLADE_FILE'] = 'KingPhisherClient.glade'
	if not gui_utilities.which_glade(os.environ['KING_PHISHER_GLADE_FILE']):
		print('[-] unable to locate the Glade data file')
		return 0

	Gtk.init(sys.argv)
	main_window = client.KingPhisherClient(config_file = config_file)
	main_window.set_position(Gtk.WindowPosition.CENTER)
	if main_window.client_initialize():
		GObject.threads_init()
		Gtk.main()

if __name__ == '__main__':
	main()
