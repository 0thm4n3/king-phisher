#!/usr/bin/python -B
# -*- coding: utf-8 -*-
#
#  KingPhisher
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following disclaimer
#    in the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of the project nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# pylint: disable=C0325

import argparse
import logging
import os
import sys
import threading
import time

if getattr(sys, 'frozen', False):
	# set the basemap data directory for forzen builds
	os.environ['BASEMAPDATA'] = os.path.join(os.path.dirname(sys.executable), 'mpl-basemap-data')

from king_phisher import find
from king_phisher import version
from king_phisher.client import application
from king_phisher.client import gui_utilities

from gi.repository import GObject
from gi.repository import Gtk
from smoke_zephyr.requirements import check_requirements

__requirements__ = [
	"dns{0}>=1.12.0".format('python' if sys.version_info.major == 2 else 'python3'),
	'Jinja2>=2.7.3',
	'paramiko>=1.15.2'
]
if sys.version_info.major == 2:
	__requirements__.append('py2-ipaddress>=3.4')

def main():
	parser = argparse.ArgumentParser(description='King Phisher Client GUI', conflict_handler='resolve')
	parser.add_argument('-c', '--config', dest='config_file', required=False, help='specify a configuration file to use')
	parser.add_argument('-v', '--version', action='version', version=parser.prog + ' Version: ' + version.version)
	parser.add_argument('-L', '--log', dest='loglvl', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], default='WARNING', help='set the logging level')
	parser.add_argument('--logger', default='KingPhisher', help='specify the root logger')
	arguments = parser.parse_args()

	logging.getLogger(arguments.logger).setLevel(logging.DEBUG)
	console_log_handler = logging.StreamHandler()
	console_log_handler.setLevel(getattr(logging, arguments.loglvl))
	console_log_handler.setFormatter(logging.Formatter("%(levelname)-8s %(message)s"))
	logging.getLogger(arguments.logger).addHandler(console_log_handler)
	config_file = arguments.config_file
	del arguments, parser
	logger = logging.getLogger('KingPhisher.Client.CLI')

	if sys.platform.startswith('linux') and not os.environ.get('DISPLAY'):
		print('[-] no display was detected, this must be run with an interactive X session')
		return os.EX_UNAVAILABLE

	if Gtk.check_version(3, 4, 0):
		print('[-] the GTK+ version is too old (minimum required is 3.4)')
		return os.EX_SOFTWARE

	# check and configure the environment
	if getattr(sys, 'frozen', False):
		data_path = os.path.dirname(sys.executable)
	else:
		missing_requirements = check_requirements(__requirements__)
		if missing_requirements:
			print('[-] the following package requirements are missing or incompatible:')
			for missing_req in missing_requirements:
				print('[-]   - ' + missing_req)
			print('[-] please install the missing requirements with pip')
			return os.EX_SOFTWARE
		data_path = os.path.dirname(__file__)
		data_path = os.path.join(data_path, 'data', 'client')

	if sys.platform.startswith('linux') and not os.getuid():
		logger.warning('it is not necessary to run the king phisher client as root')

	data_path = os.path.abspath(data_path)
	if os.path.isdir(data_path):
		find.data_path_append(data_path)

	data_path = os.getcwd()
	data_path = os.path.join(data_path, 'data', 'client')
	data_path = os.path.abspath(data_path)
	if os.path.isdir(data_path):
		find.data_path_append(data_path)

	if not gui_utilities.which_glade():
		print('[-] unable to locate the glade ui data file')
		return 0

	logger.debug("king phisher version: {0} python version: {1}.{2}.{3}".format(version.version, sys.version_info[0], sys.version_info[1], sys.version_info[2]))
	logger.debug("client running in process: {0} main tid: 0x{1:x}".format(os.getpid(), threading.current_thread().ident))

	start_time = time.time()
	logger.debug('using ui data from glade file: ' + gui_utilities.which_glade())
	try:
		app = application.KingPhisherClientApplication(config_file=config_file)
	except Exception as error:
		logger.critical("ititialization error: {0} ({1})".format(error.__class__.__name__, getattr(error, 'message', 'n/a')))
		print('[-] failed to initialize the King Phisher client')
		return 0
	logger.debug("client loaded in {0:.2f} seconds".format(time.time() - start_time))

	GObject.threads_init()
	return app.run([])

if __name__ == '__main__':
	sys.exit(main())
